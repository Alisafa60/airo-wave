// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]
}

model UserType{
  id                  Int           @id @default(autoincrement())
  type                Type
  user                User[]
}

enum Type{
  admin
  user
  healthProfessional
}

model User{
  id                    Int                @id @default(autoincrement())
  email                 String             @unique
  firstName             String
  lastName              String
  gender                String
  phone                 String?
  profilePicture        String? 
  address               String?
  password              String            
  unit                  MeasurementSystem
  userTypeId            Int
  userType              UserType           @relation(fields: [userTypeId], references: [id])
  healthCondition       HealthCondition?
  enviromentalHealthData EnviromentalHealthData[]
  healthProessional     HealthProfessional[]
  contactProfesional    ContactProfessional[]
  openAiResponse        openAiResponse[]
  conversation          Conversation[]  
  replies               Reply[]    
  routes                Route[]
  location              Location[]
  allergen              Allergen[]
}

enum MeasurementSystem{
  Metric
  Imperial
}

model HealthCondition{
  id                      Int                    @id @default(autoincrement())
  weight                  Int
  bloodType               String
  userId                  Int                    @unique
  user                    User                   @relation(fields: [userId], references: [id])
  respiratoryConditions   RespiratoryCondition[] 
  allergies               Allergy[]
  dailyHealth             DailyHealth[]           
  medications             Medication[]
}

model RespiratoryCondition{
  id                  Int                @id @default(autoincrement())
  condition           String
  diagnosis          String?
  symptomsFrequency   String?
  triggers            String?
  healthConditionId   Int
  healthCondition     HealthCondition   @relation(fields: [healthConditionId], references: [id])
  medications         Medication[]
}

model Allergy{
  id                  Int                @id @default(autoincrement())
  allergen            String
  severity            String?
  duration            String?
  triggers            String?
  healthConditionId   Int
  healthCondition     HealthCondition   @relation(fields: [healthConditionId], references: [id])
  medications         Medication[]
}


model Medication{
  id                      Int                    @id @default(autoincrement())
  name                    String
  frequency               String?
  dosage                  String?
  startDate               String?
  respiratoryConditionId  Int?
  respiratoryCondition    RespiratoryCondition?  @relation(fields: [respiratoryConditionId], references: [id])
  allergyId               Int?
  allergy                 Allergy?               @relation(fields: [allergyId], references: [id])
  healthConditionId       Int
  healthCondition         HealthCondition        @relation(fields: [healthConditionId], references: [id])
}


model DailyHealth{
  id                      Int                   @id @default(autoincrement())
  severity                Int
  condition               String?
  userHealthId            Int
  healthConditions        HealthCondition       @relation(fields: [userHealthId], references: [id])
  createdAt               DateTime               @default(now())
}

model Location {
  id                      Int                                      @id @default(autoincrement())
  location                Json
  userId                  Int
  user                    User                                     @relation(fields: [userId], references: [id])
  createdAt               DateTime                                 @default(now())
}

model EnviromentalHealthData{
  id                      Int         @id @default(autoincrement())
  temperature             Float?
  humidity                Float?
  aqi                     Float?
  aqiCategory             String?
  allergen_data           Json?
  co2Level                Float?
  ozoneLevel              Float?
  coLevel                 Float?
  o3Level                 Float?
  vocLevel                Float?
  so2Level                Float?
  no2Level                Float?
  pm1_0                   Float?
  pm25                    Float?
  pm10                    Float?
  windSpeed               Float?
  bloodO2Level            String?
  dominantPollutant       String?
  location                Json
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  userId                  Int
  user                    User         @relation(fields: [userId], references: [id])
}

model Allergen{
  id                      Int         @id @default(autoincrement())
  name                    String
  color                   String
  userId                  Int
  user                    User         @relation(fields: [userId], references: [id])
}


model openAiResponse{
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  response       String
  timestamp      DateTime     @default(now())
}

enum FeedbackType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

model HealthProfessional {
  id                    Int       @id @default(autoincrement())
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
  specialization        String
  certifications        String[]
  license               String
  messages              ContactProfessional[]
  conversations          Conversation[]
}

model Conversation {
  id          Int                 @id @default(autoincrement())
  senderId    Int
  sender      User                @relation(fields: [senderId], references: [id])
  recipientId Int
  recipient   HealthProfessional  @relation(fields: [recipientId], references: [id])
  messages    ContactProfessional[]
}

model ContactProfessional {
  id              Int                       @id @default(autoincrement())
  conversationId  Int
  conversation    Conversation              @relation(fields: [conversationId], references: [id])
  senderId        Int
  sender          User                      @relation(fields: [senderId], references: [id])
  recipientId     Int
  recipient       HealthProfessional        @relation(fields: [recipientId], references: [id])
  content         String
  sentAt          DateTime                   @default(now())
  readAt          DateTime?
  replies         Reply[]
}

model Reply {
  id                Int                 @id @default(autoincrement())
  contactId         Int
  contact           ContactProfessional @relation(fields: [contactId], references: [id])
  senderId          Int
  sender            User                @relation(fields: [senderId], references: [id])
  content           String
  sentAt            DateTime            @default(now())
}

model Route {
  id             Int                                          @id @default(autoincrement())
  geometry       Unsupported("geography(LineString, 4326)")
  userId         Int
  userLocation   User                                         @relation(fields: [userId], references: [id])
  createdAt      DateTime                                     @default(now())
  updatedAt      DateTime?                                     @updatedAt
}

model SensorData {
  id    Int      @id @default(autoincrement())
  co2   Int
  voc   Int
  createdAt DateTime @default(now())
}
